/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import java.awt.Graphics;
import java.awt.Color;
import java.awt.Point;
import java.awt.MouseInfo;
import java.awt.PointerInfo;
/**
 *
 * @author 335554069
 */
public class Game extends javax.swing.JFrame {
    
    Graphics g;
    int totalPlayers = 4; 
    int[] curPos = {0,0,0,0};               //create curPos value for players 1,2,3,4
    int curPlayer = 1; 
 
    int[] xC = {562, 562, 562, 562, 562, 562, 390, 315, 240, 165, 20, 20, 20, 20, 20, 20, 165, 240, 315, 390};
    int[] yC = {570, 440, 365, 290, 215, 48, 48, 48, 48, 48, 48, 225, 300, 375, 450, 588, 588, 588, 588, 588};
    
   
    /**
     * Creates new form Game
     */
    public Game() {
        initComponents();
        g = gamePanel.getGraphics();
        //draw board
        board.setIcon(new javax.swing.ImageIcon(getClass().getResource("board.png")));
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        gamePanel = new javax.swing.JPanel();
        board = new javax.swing.JLabel();
        dieBtn = new javax.swing.JButton();
        dieLabel = new javax.swing.JLabel();
        turn = new javax.swing.JLabel();
        turnStatus = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(670, 670));

        gamePanel.setPreferredSize(new java.awt.Dimension(670, 670));
        gamePanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                gamePanelMouseEntered(evt);
            }
        });

        board.setIcon(new javax.swing.ImageIcon(getClass().getResource("/board.png"))); // NOI18N
        board.setText("Board");
        board.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                boardMouseEntered(evt);
            }
        });

        dieBtn.setText("Roll Die");
        dieBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dieBtnActionPerformed(evt);
            }
        });

        turn.setText("Turn: ");

        javax.swing.GroupLayout gamePanelLayout = new javax.swing.GroupLayout(gamePanel);
        gamePanel.setLayout(gamePanelLayout);
        gamePanelLayout.setHorizontalGroup(
            gamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gamePanelLayout.createSequentialGroup()
                .addGroup(gamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(board, javax.swing.GroupLayout.PREFERRED_SIZE, 620, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(gamePanelLayout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(dieLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(turn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(turnStatus)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(dieBtn)))
                .addGap(0, 169, Short.MAX_VALUE))
        );
        gamePanelLayout.setVerticalGroup(
            gamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gamePanelLayout.createSequentialGroup()
                .addComponent(board, javax.swing.GroupLayout.PREFERRED_SIZE, 620, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(gamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dieBtn)
                    .addComponent(dieLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(turn)
                    .addComponent(turnStatus))
                .addContainerGap(42, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(gamePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 789, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(gamePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 768, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void dieBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dieBtnActionPerformed
        int dieValue;
        switch (curPlayer) {
        
            case 1:
                
                g.setColor(Color.white);
                g.fillOval(xC[curPos[0]], yC[curPos[0]], 10, 10); //erase player 1
        
                dieValue = (int) (Math.random() * 6) + 1;
                showDie(dieValue);
                curPos[0]+= dieValue;
                
                if(curPos[0] > 19) {
                    curPos[0] -= 20;            //subtract 20 (position 20 = position 1, which in the array is 19 = 0)
                }
        
                g.setColor(Color.blue); //draw player 1
                g.fillOval(xC[curPos[0]], yC[curPos[0]], 10, 10);
                
                curPlayer = 2;
            break;
                
            case 2: //10 pixel offset
                g.setColor(Color.white);
                g.fillOval(xC[curPos[1]] + 8, yC[curPos[1]] - 7, 10, 10); //erase player 2
                
                dieValue = (int) (Math.random() * 6) + 1;
                showDie(dieValue);
                curPos[1] += dieValue;
                if(curPos[1] > 19) {                
                    curPos[1] -= 20;             
                }
                g.setColor(Color.red); //draw player 2
                g.fillOval(xC[curPos[1]] + 8, yC[curPos[1]] - 7, 10, 10);
                
            
                if(totalPlayers >= 3) {
                    curPlayer = 3;
                } else {
                    curPlayer = 1;
                }
                break;
            
                
            case 3: //20 pixel offset
                g.setColor(Color.white);
                g.fillOval(xC[curPos[2]] + 18, yC[curPos[2]] - 17, 10, 10); //erase player 2
                
                dieValue = (int) (Math.random() * 6) + 1;
                showDie(dieValue);
                curPos[2] += dieValue;
                if(curPos[2] > 19) {                
                    curPos[2] -= 20;             
                }
                g.setColor(Color.green); //draw player 3
                g.fillOval(xC[curPos[2]] + 18, yC[curPos[2]] - 17, 10, 10);
                if(totalPlayers >= 4) {
                    curPlayer = 4;
                } else {
                    curPlayer = 1;
                }
                break;
            
            case 4:
                g.setColor(Color.white);
                g.fillOval(xC[curPos[3]] + 28, yC[curPos[3]] - 27, 10, 10); //erase player 4
                
                dieValue = (int) (Math.random() * 6) + 1;
                showDie(dieValue);
                curPos[3] += dieValue;
                if(curPos[3] > 19) {                
                    curPos[3] -= 20;             
                }
                g.setColor(Color.orange); //draw player 4
                g.fillOval(xC[curPos[3]] + 28, yC[curPos[3]] - 27, 10, 10); //draw player 4
                
                
                curPlayer = 1;
                
                break;
        
        }
    }//GEN-LAST:event_dieBtnActionPerformed

    private void boardMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_boardMouseEntered

    }//GEN-LAST:event_boardMouseEntered

    private void gamePanelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_gamePanelMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_gamePanelMouseEntered

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Game().setVisible(true);
            }
        });
        
        
    }
    public void showDie(int dieValue) {
        switch (dieValue) {
            case 1:
                dieLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("1.png")));
                break;
            case 2:
                dieLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("2.png")));
                break;
            case 3:
                dieLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("3.png")));
                break;
            case 4:
                dieLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("4.png")));
                break;
            case 5: 
                dieLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("5.png")));
                break;
            case 6:
                dieLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("6.png")));
                break;
        }
    }
        
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel board;
    private javax.swing.JButton dieBtn;
    private javax.swing.JLabel dieLabel;
    private javax.swing.JPanel gamePanel;
    private javax.swing.JLabel turn;
    private javax.swing.JLabel turnStatus;
    // End of variables declaration//GEN-END:variables
}
